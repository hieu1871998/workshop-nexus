generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String     @id @default(cuid())
  email                 String?    @unique
  role                  Role       @default(USER)
  emailVerified         DateTime?
  image                 String?
  name                  String?
  createdAt             DateTime   @default(now())
  accounts              Account[]
  sessions              Session[]
  workshopsHosted       Workshop[] @relation("WorkshopHost")
  tags                  UserTag[]  @relation("UserToUserTag")
  workshopsParticipated Workshop[] @relation("WorkshopParticipant")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workshop {
  id                  String               @id @default(cuid())
  hostId              String
  topic               String
  presentationDate    DateTime
  maxParticipants     Int
  description         String
  categoryId          String
  status              WorkshopStatus       @default(DRAFT)
  approvalDate        DateTime?
  completionDate      DateTime?
  createdAt           DateTime             @default(now())
  startDate           DateTime?
  submissionDate      DateTime?
  category            Category             @relation(fields: [categoryId], references: [id])
  host                User                 @relation("WorkshopHost", fields: [hostId], references: [id])
  participants        User[]               @relation("WorkshopParticipant")
  tags                WorkshopTag[]        @relation("WorkshopToWorkshopTag")
  workshopThumbnail   WorkshopThumbnail    @relation(fields: [workshopThumbnailId], references: [id])
  workshopThumbnailId String               @unique
  workshopAttachment  WorkshopAttachment[]
}

model Category {
  id        String     @id @default(cuid())
  label     String     @unique
  color     TagColor   @default(dark)
  variant   TagVariant @default(default)
  workshops Workshop[]
}

model UserTag {
  id      Int        @id @default(autoincrement())
  label   String     @unique
  variant TagVariant @default(default)
  color   TagColor   @default(dark)
  users   User[]     @relation("UserToUserTag")
}

model WorkshopTag {
  id        Int        @id @default(autoincrement())
  label     String     @unique
  variant   TagVariant @default(default)
  color     TagColor   @default(dark)
  workshops Workshop[] @relation("WorkshopToWorkshopTag")
}

model Contact {
  id       String   @id
  name     String
  email    String
  subject  String
  message  String
  sentDate DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum WorkshopStatus {
  PENDING
  APPROVED
  REJECTED
  ONGOING
  COMPLETED
  CANCELED
  DRAFT
}

enum TagVariant {
  filled
  light
  outline
  dot
  transparent
  default
  white
}

enum TagColor {
  dark
  gray
  red
  pink
  grape
  violet
  indigo
  blue
  cyan
  teal
  green
  lime
  yellow
  orange
}

model WorkshopThumbnail {
  id                 String    @id @default(cuid())
  pathname           String
  contentType        String
  contentDisposition String
  url                String
  workshop           Workshop?
}

model WorkshopAttachment {
  id                 String    @id @default(cuid())
  pathname           String
  contentType        String
  contentDisposition String
  url                String
  workshop           Workshop? @relation(fields: [workshopId], references: [id])
  workshopId         String?
}
