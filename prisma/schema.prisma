generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String     @id @default(cuid())
  createdAt             DateTime   @default(now())
  email                 String     @unique
  firstName             String
  lastName              String
  password              String
  avatar                String
  workshopsHosted       Workshop[] @relation("WorkshopHost")
  role                  Role       @default(USER)
  workshopsParticipated Workshop?  @relation("WorkshopParticipant", fields: [workshopId], references: [id])
  workshopId            String?
  accounts              Account[]
  sessions              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workshop {
  id               String   @id @default(cuid())
  hostId           String
  topic            String
  presentationDate DateTime
  maxParticipants  Int
  participants     User[]   @relation("WorkshopParticipant")
  host             User     @relation("WorkshopHost", fields: [hostId], references: [id])
}

enum Role {
  USER
  ADMIN
}
