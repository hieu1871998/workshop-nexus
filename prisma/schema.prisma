generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String     @id @default(cuid())
  name                  String?
  email                 String?    @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  workshopsHosted       Workshop[] @relation("WorkshopHost")
  role                  Role       @default(USER)
  workshopsParticipated Workshop[] @relation("WorkshopParticipant")
  tags                  UserTag[]
  createdAt             DateTime   @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workshop {
  id               String         @id @default(cuid())
  hostId           String
  topic            String
  description      String
  presentationDate DateTime
  maxParticipants  Int
  participants     User[]         @relation("WorkshopParticipant")
  host             User           @relation("WorkshopHost", fields: [hostId], references: [id])
  category         Category       @relation(fields: [categoryId], references: [id])
  categoryId       String
  status           WorkshopStatus @default(DRAFT)
  tags             WorkshopTag[]
  createdAt        DateTime       @default(now())
  submissionDate   DateTime?
  approvalDate     DateTime?
  startDate        DateTime?
  completionDate   DateTime?
}

model Category {
  id        String     @id @default(cuid())
  label     String     @unique
  workshops Workshop[]
  color     TagColor   @default(default)
  variant   TagVariant @default(solid)
}

enum Role {
  USER
  ADMIN
}

enum WorkshopStatus {
  PENDING
  APPROVED
  REJECTED
  ONGOING
  COMPLETED
  CANCELED
  DRAFT
}

model UserTag {
  id      Int        @id @default(autoincrement())
  label   String     @unique
  users   User[]
  color   TagColor   @default(default)
  variant TagVariant @default(solid)
}

model WorkshopTag {
  id        Int        @id @default(autoincrement())
  label     String     @unique
  workshops Workshop[]
  color     TagColor   @default(default)
  variant   TagVariant @default(solid)
}

enum TagVariant {
  bordered
  dot
  faded
  flat
  light
  shadow
  solid
}

enum TagColor {
  default
  primary
  secondary
  success
  warning
  danger
}
